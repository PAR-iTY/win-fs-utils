import{fileURLToPath}from"url";import{parse,sep,posix,join}from"path";import{realpathSync}from"fs";import{isLetter}from"./utils.js";const realPath=a=>realpathSync(a),posixPath=a=>a.split(sep).join(posix.sep),cleanFileURL=a=>a.toLowerCase().startsWith("file:")?fileURLToPath(a):a,cleanSysRoot=a=>{if(isLetter(a[0])&&"c"!==a[0].toLowerCase())return a;let b=0;switch(parse(a).root.toLowerCase()){case"/":return a;case"c:/":b=3;break;case"c:\\":b=3;break;case"c:\\\\":b=4;break;case"//":b=2;break;case"\\":b=1;break;case"\\\\":b=2;break;case"":console.error("[pipe.js] empty path detected:",a);break;default:console.error(`[path root switch statement error] path root: '${parse(a).root}'`);}return b&&(a=join("/",parse(a).dir.slice(b),parse(a).base)),a},cleanBashRoot=a=>a.startsWith("C:/Program Files/Git")?a.replace("C:/Program Files/Git",""):a,syncPipe=(...a)=>b=>a.reduce((a,b)=>b(a),b),asyncPipe=(...a)=>b=>a.reduce(async(a,b)=>b(await a),b),sleep=a=>new Promise(b=>{setTimeout(()=>b(a+"/sleep/"),2e3)}),log=a=>a,cleanGlobSyncPipe=syncPipe(cleanSysRoot,posixPath),cleanCwdSyncPipe=syncPipe(cleanBashRoot,cleanGlobSyncPipe),cleanPathAsyncPipe=asyncPipe(cleanBashRoot,cleanFileURL,realPath,cleanGlobSyncPipe);export{realPath,posixPath,cleanFileURL,cleanSysRoot,cleanBashRoot,syncPipe,asyncPipe,cleanGlobSyncPipe,cleanCwdSyncPipe,cleanPathAsyncPipe,sleep,log};