import isMainESM from"./isMainESM.js";import{isSafeWinPath,isFile}from"./utils.js";import{cleanGlobSyncPipe,cleanCwdSyncPipe,cleanPathAsyncPipe}from"./pipe.js";import{tweakTags}from"./ID3-tags.js";import minimist from"minimist";import prompts from"prompts";import glob from"glob";import{parse,join,extname}from"path";const init=async()=>{const a=await argsHandle(),b=getFiles(a.path,a.ext,a.recurse);b.length&&".mp3"===a.ext&&a.tagType&&a.tagReplace&&tweakTags(b,a.tagType,a.tagFind||void 0,a.tagReplace)},argsHandle=async()=>{const a=minimist(process.argv.slice(2),{default:{ext:""}});if(a.hasOwnProperty("ext")&&a.ext&&!0!==a.ext?"."!==a.ext[0]&&(a.ext="."+a.ext):a.hasOwnProperty("path")&&extname(a.path)&&(a.ext=extname(a.path)),a.ext=a.ext.toLowerCase(),a.recurse=a.hasOwnProperty("recurse")&&!0===a.recurse?"/":"",!a.hasOwnProperty("path")){let b=await pipeHandle(process.cwd(),cleanCwdSyncPipe);return b?(a.path=b,a):(console.error("[cwd error]",b),a.path=await promptHandle(),a)}return a.path&&!0!==a.path?(a.path=await pipeHandle(a.path,cleanPathAsyncPipe),a.path?a:(console.error("[path handle error]",a.path),a.path=await promptHandle(),a)):(console.error("[--path is falsy or empty]",a.path),a.path=await promptHandle(),a)},pipeHandle=async function(a,b){try{a=await b(a)}catch(a){return console.error("[pipe error]",a),!1}if(a)return a},promptHandle=async a=>{const b=await prompts({type:"text",name:"path",message:a||"Please enter a path to search or press enter to default to current directory",validate:async a=>!!(await pipeHandle(a,cleanPathAsyncPipe))||`❌ Path is forbidden, please try again`});if(""===b.path||"."===b.path||"./"===b.path){const a=await pipeHandle(process.cwd(),cleanCwdSyncPipe);b.path=!!a&&a}return b.path},getFiles=(a,b,c)=>{const d={ignore:["**/*NTUSER*","**/*ntuser*","**/*.DAT","**/*.dat","**/*.SYS","**/*.sys","**/*msdownld.tmp","**/*Recovery.txt","**/AppData/**","**/Application Data/**","**/$AVG/**","**/$RECYCLE.BIN/**","**/$Recycle.Bin/**","**/System Volume Information/**","**/Windows/**","**/Application Data/**","**/Local Settings/**","**/ProgramData/**","**/Program Files/**","**/Program Files (x86)/**","**/Recovery/**","**/PerfLogs/**","**/Documents and Settings/**","**/node_modules/**","F:/Utility/**","F:/UMIT/OS/**","C:/*Config*"],strict:!1,silent:!0,nodir:!!b,nocase:!0,statCache:!0};let e=parse(a).root,f=a.slice(Math.max(e.length-1,0)),g="**/*";"/"===a&&(c?a="":g="*"),"/"!==e[0]&&("/"===f&&(f="",!c&&(g="/*")),d.cwd=e,a=f),isFile(join(e,f))&&(c="",g="",b="",a=join(e,f));try{const e=glob.sync(`${a}${c}${g}${b}`,d);return!!e.length&&e.map(a=>cleanGlobSyncPipe(a))}catch(a){return console.error("glob error:",a),!1}};isMainESM(import.meta.url)&&("win32"===process.platform?init():console.error("[platform is not win32] platform:",process.platform));export{init,pipeHandle,promptHandle,getFiles};